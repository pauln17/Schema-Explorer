// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  passwordHash  String
  role          Role         @default(USER)
  repository    Repository[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  emailVerified Boolean      @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Repository {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  table  Table[]

  @@map("repository")
}

model Table {
  id           Int        @id @default(autoincrement())
  repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId Int
  column       Column[]

  @@map("table")
}

model Column {
  id      Int   @id @default(autoincrement())
  table   Table @relation(fields: [tableId], references: [id])
  tableId Int

  // A relation is specified because there are two instances of ColumnReferences[] -- one for outgoing, one for incoming
  outgoingReferences ColumnReferences[] @relation("SourceColumn") // Points to other columns
  incomingReferences ColumnReferences[] @relation("TargetColumn") // Other columns can point here to reference

  @@map("column")
}

model ColumnReferences {
  id             Int    @id @default(autoincrement())
  sourceColumn   Column @relation("SourceColumn", fields: [sourceColumnId], references: [id]) // The source column that is being "referenced" by another column
  sourceColumnId Int
  targetColumn   Column @relation("TargetColumn", fields: [targetColumnId], references: [id]) // The target column that is referencing a column of the target table
  targetColumnId Int

  @@map("columnreferences")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum Role {
  USER
  ADMIN
}